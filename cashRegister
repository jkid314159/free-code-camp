/**
Author: AC Cholakis aka: jkid314159
Date: September 05, 2018

Coded for Free Code Camp's JavaScript Algorithms and Data Structures Projects.

Design a cash register drawer function checkCashRegister() that accepts purchase price as the first argument (price), payment as the second argument (cash), and cash-in-drawer (cid) as the third argument.

cid is a 2D array listing available currency.

The checkCashRegister() function should always return an object with a status key and a change key.

Return {status: "INSUFFICIENT_FUNDS", change: []} if cash-in-drawer is less than the change due, or if you cannot return the exact change.

Return {status: "CLOSED", change: [...]} with cash-in-drawer as the value for the key change if it is equal to the change due.

Otherwise, return {status: "OPEN", change: [...]}, with the change due in coins and bills, sorted in highest to lowest order, as the value of the change key.
**/


console.clear();

function checkCashRegister(price, cash, cid) {
  let total = 0.0;  
  var arrTemp = [];
  var cidOut = [];
  let change = Number(cash - price);
  let changeOut = [];
  //parseFloat(Math.round( (cash - price) * 100) / 100).toFixed(2);
  const denomination = { "ONE HUNDRED": 100, "TWENTY": 20, "TEN": 10, "FIVE": 5, "ONE": 1, "QUARTER": 0.25, "DIME": 0.10, "NICKEL": 0.05, "PENNY": 0.01 };
  
  //Sum all values in cid array for total
  cid.forEach( (currentValue) => { 
      total += currentValue[1]; 
    });
  //Number(Math.round(total+'e2')+'e-2') - 2 decimal places
  total = Number(Math.round(total+'e2')+'e-2');
  
  
  //Swap values from lowest-highest to hightest-lowest
  function swapArray(arrayIn) {
    for (var i = 0; i < arrayIn.length; i++) {
    arrTemp.unshift(arrayIn[i]);
    }
    return arrTemp;
  }

  if ( total == change ) {
    return {status: "CLOSED", change: [...cid]};
  } else {
    cidOut = swapArray(cid);
    changeOut = yourChange(cidOut);
    if (change != 0) {
      return {status: "INSUFFICIENT_FUNDS", change: []};
    } else {
      return { status: "OPEN", change: changeOut };
    }
    
  }

  function yourChange(cidIn) {
    return cidIn.reduce( (accumulator, cidValue, currentIndex, array) => {
      let newOut = checkTrayValue(cidValue);
        if ( newOut[1] > 0 ) {
          accumulator.push( newOut );
      }
          return accumulator;
    }, [] );//cidIn.reduce   
  }//yourChange(cidIn)
      
  //Check each denomination in draw to make change
  function checkTrayValue(valueIn) {
    //divide change by each denomination, ie: 0.50/100
    let quotient = Math.floor(change/denomination[ valueIn[0] ]);
    if ( quotient > 0 ) {
      if ( change >= valueIn[1] ) {  
        change = Number(Math.round( (change - valueIn[1])+'e2')+'e-2');
        return [ valueIn[0], valueIn[1] ];
      } else if ( change > 0.01 ) {
        //change - (quotient * denomination[ valueIn[0] ])
        change = Number(Math.round( (change - (quotient * denomination[ valueIn[0] ])) +'e2')+'e-2');
        return [  valueIn[0], (quotient * denomination[ valueIn[0] ]) ]; 
      } 
    }//( quotient > 0 )
    return 0;
  }//checkTrayValue()
  
}//checkCashRegister()


checkCashRegister(19.5, 20, [["PENNY", 1.01], ["NICKEL", 2.05], ["DIME", 3.1], ["QUARTER", 4.25], ["ONE", 90], ["FIVE", 55], ["TEN", 20], ["TWENTY", 60], ["ONE HUNDRED", 100]]);

console.log(checkCashRegister(19.5, 20, [["PENNY", 1.01], ["NICKEL", 2.05], ["DIME", 3.1], ["QUARTER", 4.25], ["ONE", 90], ["FIVE", 55], ["TEN", 20], ["TWENTY", 60], ["ONE HUNDRED", 100]]));

/*console.log(checkCashRegister(3.26, 100, [["PENNY", 1.01], ["NICKEL", 2.05], ["DIME", 3.1], ["QUARTER", 4.25], ["ONE", 90], ["FIVE", 55], ["TEN", 20], ["TWENTY", 60], ["ONE HUNDRED", 100]]));*/